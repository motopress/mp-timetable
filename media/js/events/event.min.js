/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./media/js/events/event.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./media/js/events/event.js":
/*!**********************************!*\
  !*** ./media/js/events/event.js ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("/*global jQuery:false, console:false, _:false, CommonManager:false,Registry:false, wp:false, MPTT:false*/\nRegistry.register(\"Event\", function ($) {\n  \"use strict\";\n\n  var state;\n\n  function createInstance() {\n    return {\n      event_id: '',\n      eventsData: {},\n\n      /**\r\n       * Init\r\n       */\n      init: function init() {\n        state.initTimePicker();\n        state.addEventButton();\n        state.initDeleteButtons();\n        state.initEditButtons();\n        state.initColorPicker();\n        state.initDatePicker();\n        state.columnRadioBox();\n      },\n\n      /**\r\n       * Init time picker\r\n       */\n      initTimePicker: function initTimePicker() {\n        var timeFormat = Boolean(parseInt($('#time_format').val()));\n        $('#event_start').timepicker({\n          showPeriod: timeFormat,\n          // Define whether or not to show AM/PM with selected time. (default: false)\n          showPeriodLabels: timeFormat,\n          defaultTime: '00:00'\n        });\n        $('#event_end').timepicker({\n          showPeriod: timeFormat,\n          // Define whether or not to show AM/PM with selected time. (default: false)\n          showPeriodLabels: timeFormat,\n          defaultTime: '00:00'\n        });\n      },\n\n      /**\r\n       * Init widget slider\r\n       * @param selector\r\n       * @param autoScroll\r\n       */\n      initSlider: function initSlider(selector, autoScroll) {\n        var play = _.isUndefined(autoScroll) ? false : Boolean(autoScroll);\n        var id = selector.replace(/^\\D+/g, '');\n        $(selector).carouFredSel({\n          items: {\n            visible: 3\n          },\n          direction: \"up\",\n          scroll: {\n            items: 1,\n            easing: \"swing\",\n            pauseOnHover: true,\n            onAfter: function onAfter(data) {\n              data.items.old.each(function () {\n                $(this).removeClass('visible');\n              });\n              data.items.visible.each(function () {\n                $(this).addClass('visible');\n              });\n            }\n          },\n          auto: {\n            play: play,\n            timeoutDuration: 3000\n          },\n          prev: {\n            button: \"#mp_prev_button\" + id\n          },\n          next: {\n            button: \"#mp_next_button\" + id\n          }\n        });\n        $(selector).trigger(\"currentVisible\", function (items) {\n          items.addClass(\"visible\");\n        });\n        state.setColorSettings(selector + ' ' + '.mptt-colorized');\n      },\n\n      /**\r\n       * init Delete Button\r\n       */\n      initDeleteButton: function initDeleteButton() {\n        var $events = $('#events-list');\n        $events.find('li.event').find('i.operation-button.dashicons-no.dashicons').off('click').on('click', function () {\n          if ($events.find('li.event').length > 1) {\n            $(this).parents('li.event').remove();\n          } else {\n            $events.remove();\n          }\n        });\n      },\n\n      /**\r\n       * Init color picker\r\n       */\n      initColorPicker: function initColorPicker(parent) {\n        if (_.isUndefined(parent)) {\n          parent = '';\n        }\n\n        var selectorColorInput = $(parent + ' input.clr-picker');\n        var selectorTextInput = $(parent + ' input.regular-text');\n        selectorColorInput.spectrum(\"destroy\"); // init color picker\n\n        selectorColorInput.spectrum({\n          preferredFormat: \"rgb\",\n          showInput: true,\n          showAlpha: true,\n          allowEmpty: true,\n          palette: [[\"#000\", \"#444\", \"#666\", \"#999\", \"#ccc\", \"#eee\", \"#f3f3f3\", \"#fff\"], [\"#f00\", \"#f90\", \"#ff0\", \"#0f0\", \"#0ff\", \"#00f\", \"#90f\", \"#f0f\"], [\"#f4cccc\", \"#fce5cd\", \"#fff2cc\", \"#d9ead3\", \"#d0e0e3\", \"#cfe2f3\", \"#d9d2e9\", \"#ead1dc\"], [\"#ea9999\", \"#f9cb9c\", \"#ffe599\", \"#b6d7a8\", \"#a2c4c9\", \"#9fc5e8\", \"#b4a7d6\", \"#d5a6bd\"], [\"#e06666\", \"#f6b26b\", \"#ffd966\", \"#93c47d\", \"#76a5af\", \"#6fa8dc\", \"#8e7cc3\", \"#c27ba0\"], [\"#c00\", \"#e69138\", \"#f1c232\", \"#6aa84f\", \"#45818e\", \"#3d85c6\", \"#674ea7\", \"#a64d79\"], [\"#900\", \"#b45f06\", \"#bf9000\", \"#38761d\", \"#134f5c\", \"#0b5394\", \"#351c75\", \"#741b47\"], [\"#600\", \"#783f04\", \"#7f6000\", \"#274e13\", \"#0c343d\", \"#073763\", \"#20124d\", \"#4c1130\"]],\n          showPalette: true,\n          show: function show(color) {\n            $(this).val(color);\n          },\n          hide: function hide(color) {\n            var parent = $(this).parents('.select-color');\n            parent.find('.regular-text').val($(this).val());\n          },\n          change: function change(color) {\n            var parent = $(this).parents('.select-color');\n            parent.find('input:not([type=\"hidden\"])').val($(this).val());\n          }\n        }); //change color preview block\n\n        selectorTextInput.off('keyup').on('keyup', function () {\n          var parentTr = $(this).parents('.select-color');\n          var spectrumElement = parentTr.find('.clr-picker');\n          var colorElement = parentTr.find(\".regular-text\").val();\n          var preview_inner = parentTr.find(\".sp-preview-inner\");\n          preview_inner.css({\n            'background-color': colorElement\n          });\n          spectrumElement.spectrum(\"set\", colorElement);\n        });\n      },\n\n      /**\r\n       * Add event\r\n       */\n      addEventButton: function addEventButton() {\n        $(document).on('click.admin', '#add_mp_event', function () {\n          if ($(this).hasClass('edit')) {\n            state.updateEventData();\n          } else {\n            state.renderEventItem();\n          }\n        });\n      },\n\n      /**\r\n       * init event data delete button\r\n       */\n      initDeleteButtons: function initDeleteButtons() {\n        $(document).on('click.admin', '#events-list .delete-event-button', function () {\n          var id = $(this).attr('data-id');\n          state.deleteEvent(id);\n        });\n      },\n\n      /**\r\n       * init event data edit button\r\n       */\n      initEditButtons: function initEditButtons() {\n        $(document).on('click.admin', '#events-list .edit-event-button', function () {\n          var id = $(this).attr('data-id'),\n              $tr = $(this).parent().parent();\n          $(this).parent().find('.spinner').addClass('is-active');\n\n          Registry._get(\"adminFunctions\").wpAjax({\n            controller: \"events\",\n            action: \"get_event_data\",\n            id: id\n          }, function (data) {\n            var $addMpEvent = $('#add_mp_event');\n            var $events = $('#events-list');\n            $events.find('.spinner').removeClass('is-active');\n            $events.find(' tr').removeClass('active');\n            $tr.addClass('active');\n            $('#event_start').val(data.event_start);\n            $('#event_end').val(data.event_end);\n            $('#description').val(data.description);\n            $('#user_id').val(data.user_id);\n            $('#weekday_id').val(data.column_id);\n            $addMpEvent.addClass('edit');\n            $addMpEvent.val('Update');\n            state.event_id = data.id;\n          }, function (data) {\n            console.warn(data);\n          });\n        });\n      },\n\n      /**\r\n       * Delete event data by id\r\n       *\r\n       * @param id\r\n       */\n      deleteEvent: function deleteEvent(id) {\n        Registry._get(\"adminFunctions\").wpAjax({\n          controller: \"events\",\n          action: \"delete\",\n          id: id\n        }, function (data) {\n          var $deleteEvent = $('#events-list').find('tr[data-id=\"' + id + '\"]');\n\n          if ($deleteEvent.length) {\n            $deleteEvent.remove();\n          }\n        }, function (data) {\n          console.log(data);\n        });\n      },\n\n      /**\r\n       * Update event item\r\n       */\n      updateEventItem: function updateEventItem() {\n        var item = $('#events-list').find('tr[data-id=\"' + state.event_id + '\"]');\n        var $userId = $('#user_id');\n        item.find('td.event-column').text($('#weekday_id').find('option:selected').text());\n        item.find('td.event-start').text($('#event_start').val());\n        item.find('td.event-end').text($('#event_end').val());\n        item.find('td.event-user-id').text($userId.val() === '-1' ? '' : $userId.find('option:selected').text());\n        item.find('td.event-description').text($('#description').val());\n        state.event_id = null;\n        $('#add_mp_event').removeClass('edit').val('Add New');\n      },\n\n      /**\r\n       * Update Event data\r\n       */\n      updateEventData: function updateEventData() {\n        var $addEventTable = $('#add_event_table').find('.spinner');\n        $addEventTable.addClass('is-active');\n\n        Registry._get(\"adminFunctions\").wpAjax({\n          controller: \"events\",\n          action: \"update_event_data\",\n          data: {\n            id: Registry._get(\"Event\").event_id,\n            event_start: $('#event_start').val(),\n            event_end: $('#event_end').val(),\n            description: $('#description').val(),\n            user_id: $('#user_id').val(),\n            weekday_ids: $('#weekday_id').val()\n          }\n        }, function () {\n          $addEventTable.removeClass('is-active');\n          state.updateEventItem();\n          state.clearTable();\n        }, function (data) {\n          $addEventTable.removeClass('is-active');\n          console.log(data);\n        });\n      },\n\n      /**\r\n       * Render event item\r\n       */\n      renderEventItem: function renderEventItem() {\n        var $weekdayId = $('#weekday_id');\n        var $userId = $('#user_id');\n        var column_ID = $weekdayId.find('option:selected').val();\n        var $eventStart = $('#event_start');\n        var $eventEnd = $('#event_end');\n        var $description = $('#description');\n        var template = {\n          tag: 'tr',\n          attrs: {},\n          content: [{\n            tag: 'td',\n            attrs: {\n              'style': 'display:none;'\n            },\n            content: [{\n              tag: 'input',\n              attrs: {\n                'type': 'hidden',\n                'name': 'event_data[' + column_ID + '][weekday_ids][]',\n                'value': column_ID\n              }\n            }, {\n              tag: 'input',\n              attrs: {\n                'type': 'hidden',\n                'name': 'event_data[' + column_ID + '][event_start][]',\n                'value': $eventStart.val()\n              }\n            }, {\n              tag: 'input',\n              attrs: {\n                'type': 'hidden',\n                'name': 'event_data[' + column_ID + '][event_end][]',\n                'value': $eventEnd.val()\n              }\n            }, {\n              tag: 'input',\n              attrs: {\n                'type': 'hidden',\n                'name': 'event_data[' + column_ID + '][description][]',\n                'value': $description.val()\n              }\n            }, {\n              tag: 'input',\n              attrs: {\n                'type': 'hidden',\n                'name': 'event_data[' + column_ID + '][user_id][]',\n                'value': $userId.val()\n              }\n            }]\n          }, {\n            tag: 'td',\n            attrs: {\n              'class': 'event-column'\n            },\n            content: [$weekdayId.find('option:selected').text()]\n          }, {\n            tag: 'td',\n            attrs: {\n              'class': 'event-start'\n            },\n            content: [$eventStart.val()]\n          }, {\n            tag: 'td',\n            attrs: {\n              'class': 'event-end'\n            },\n            content: [$eventEnd.val()]\n          }, {\n            tag: 'td',\n            attrs: {\n              'class': 'event-description'\n            },\n            content: [$description.val()]\n          }, {\n            tag: 'td',\n            attrs: {\n              'class': 'event-user-id'\n            },\n            content: [$userId.val() === '-1' ? '' : $userId.find('option:selected').text()]\n          }, {\n            tag: 'td',\n            attrs: {},\n            content: []\n          }]\n        };\n\n        var htmlObject = Registry._get(\"adminFunctions\").getHtml(template);\n\n        $('#events-list').find('tbody').append(htmlObject);\n        $('.events-list-wrapper').scrollTop(1E10);\n        state.clearTable();\n      },\n\n      /**\r\n       * Set event height\r\n       *\r\n       * @param element\r\n       */\n      setEventHeight: function setEventHeight(element) {\n        var parent_height = element.parent().outerHeight(),\n            body = $('body');\n        var elementHeight = element.height();\n        var min_height = element.data('min-height');\n        var inner_height = element.find('.mptt-inner-event-content').height();\n        element.css('position', '').css('width', '').css('min-height', '');\n\n        if (!body.hasClass('mprm_ie_browser')) {\n          if (inner_height <= min_height) {\n            element.css('min-height', min_height);\n          } else {\n            element.css('min-height', inner_height);\n          }\n        } else {\n          /** IE block **/\n          inner_height = element.css('height', '').find('.mptt-inner-event-content').height();\n          element.height(elementHeight);\n\n          if (inner_height <= min_height) {\n            element.css('max-height', min_height);\n          } else {\n            element.css('height', '');\n            element.css('max-height', inner_height);\n          }\n        }\n\n        if (parent_height < elementHeight) {\n          element.height(elementHeight);\n        }\n      },\n\n      /**\r\n       * Recalculate Height\r\n       * @param tdParent\r\n       * @param element\r\n       */\n      recalculate_Height: function recalculate_Height(tdParent, element) {\n        var events = $('.mptt-event-container', tdParent),\n            eventCount = events.length,\n            heightItem = 0,\n            top = 0,\n            tdHeight = tdParent.height();\n\n        if (!$('body').hasClass('mprm_ie_browser')) {\n          heightItem = 100 / (eventCount > 0 ? eventCount : 1);\n\n          if (!_.isUndefined(element)) {\n            element.height(heightItem + '%');\n          } else {\n            $.each(events, function () {\n              var $event = $(this);\n              $event.height(heightItem + '%');\n\n              if (_.isEmpty($event.data('min-height'))) {\n                $event.data('min-height', $event.height());\n              }\n\n              $event.css('top', top + '%');\n              $event.removeClass('mptt-hidden');\n              top += heightItem;\n            });\n          }\n        } else {\n          heightItem = tdHeight / (eventCount > 0 ? eventCount : 1);\n\n          if (!_.isUndefined(element)) {\n            element.height(heightItem);\n          } else {\n            $.each(events, function () {\n              var $event = $(this);\n              $event.height(heightItem);\n\n              if (_.isEmpty($event.data('min-height'))) {\n                var min_height = $event.height();\n\n                if (min_height === 0) {\n                  $event.data('min-height', heightItem);\n                } else {\n                  $event.data('min-height', min_height);\n                }\n              }\n\n              $event.css('top', top + 'px');\n              $event.removeClass('mptt-hidden');\n              top += heightItem;\n            });\n          }\n        }\n      },\n\n      /**\r\n       * Fill all possible height in ceil\r\n       */\n      setEventsHeight: function setEventsHeight() {\n        var events = $('.mptt-shortcode-wrapper').find('table').find('td.event');\n        $.each(events, function () {\n          var td = $(this);\n          state.recalculate_Height(td);\n        });\n      },\n\n      /**\r\n       * Set user color settings\r\n       * @param selector\r\n       */\n      setColorSettings: function setColorSettings(selector) {\n        if (_.isUndefined(selector)) {\n          selector = '.mptt-colorized';\n        }\n\n        var elements = $(selector); // var height = '';\n\n        $.each(elements, function () {\n          var element = $(this),\n              bg = element.attr('data-bg_hover_color'),\n              color = element.attr('data-hover_color'),\n              tdParent = element.parent(); // parentHeight = tdParent.height(),\n          // elementHeight = '';\n\n          switch (element.attr('data-type')) {\n            case \"column\":\n            case \"event\":\n              element.hover(function () {\n                if (!_.isEmpty(bg)) {\n                  element.css('background-color', bg);\n                }\n\n                if (!_.isEmpty(color)) {\n                  element.css('color', color);\n                }\n\n                state.setEventHeight(element);\n              }, function () {\n                element.css('max-height', '').css('min-height', '');\n                state.recalculate_Height(tdParent, element);\n                element.css('background-color', element.attr('data-bg_color'));\n                element.css('color', element.attr('data-color'));\n              });\n              break;\n\n            case \"widget\":\n              element.hover(function () {\n                element.css('background-color', element.attr('data-background-hover-color'));\n                element.css('color', $(this).attr('data-hover-color'));\n                element.css('border-left-color', element.attr('data-hover-border-color'));\n              }, function () {\n                element.css('background-color', element.attr('data-background-color'));\n                element.css('color', element.attr('data-color'));\n                element.css('border-left-color', element.attr('data-border-color'));\n              });\n              break;\n\n            default:\n              break;\n          }\n        });\n      },\n\n      /**\r\n       * Clear input data\r\n       */\n      clearTable: function clearTable() {\n        var $weekdayId = $(\"#weekday_id\");\n        $('#add_event_table input:not(.button),#add_event_table textarea').val('');\n        $weekdayId.val($weekdayId.find('option:first').attr('value'));\n      },\n\n      /**\r\n       * get Row span\r\n       *\r\n       * @param events\r\n       * @returns {number}\r\n       */\n      getRowSpan: function getRowSpan(events, td) {\n        var arrMax = [];\n        var arrMin = [];\n        var columnId = td.attr('data-column-id');\n        /*\r\n         * Erroneous Positioning of Events\r\n         * https://wordpress.org/support/topic/erroneous-positioning-of-events/\r\n         */\n\n        var nextTr = td.closest('tr').next('tr');\n        var nextTd = nextTr.find('td[data-column-id=\"' + columnId + '\"]');\n        var nextTdSet = nextTr.length > 0 && nextTd.length > 0 && nextTd.children().length > 0;\n\n        while (!nextTdSet) {\n          if (nextTr.next('tr').length == 0) {\n            nextTdSet = true;\n            nextTr = false;\n            break;\n          }\n\n          nextTr = nextTr.next('tr');\n          nextTd = nextTr.find('td[data-column-id=\"' + columnId + '\"]');\n          nextTdSet = nextTd.children().length > 0;\n        }\n\n        var nextEventIndex = false;\n\n        if (nextTr) {\n          nextEventIndex = nextTr.data('index');\n        } //console.log(td, nextEventIndex)\n\n        /*  End of \"Erroneous Positioning of Events\" */\n\n\n        $.each(events, function (index) {\n          var start = $(this).attr('data-start');\n          var end = $(this).attr('data-end');\n          arrMin[index] = start;\n          arrMax[index] = end;\n        });\n        var min = Math.min.apply(Math, arrMin);\n        var max = Math.max.apply(Math, arrMax);\n\n        if (nextEventIndex && max > nextEventIndex) {\n          max = nextEventIndex;\n        }\n\n        var rowSpan = max - min;\n        return rowSpan < 1 ? 1 : rowSpan;\n      },\n\n      /**\r\n       * Responsive filter\r\n       *\r\n       * @param element\r\n       */\n      responsiveFilter: function responsiveFilter(element) {\n        var eventID = 'all';\n        var parentShortcode = element.parents('.mptt-shortcode-wrapper');\n\n        if (element.is(\"select\")) {\n          eventID = element.val();\n        } else {\n          eventID = element.attr('href').replace(\"#\", \"\");\n        }\n\n        var $listEvent = parentShortcode.find('.mptt-list-event');\n\n        if (eventID !== 'all') {\n          $listEvent.hide();\n          parentShortcode.find('.mptt-list-event[data-event-id=\"' + eventID + '\"]').show();\n        } else {\n          $listEvent.show();\n        }\n\n        $.each(parentShortcode.find('.mptt-column'), function () {\n          $(this).show();\n\n          if ($(this).find('.mptt-list-event:visible').length < 1) {\n            $(this).hide();\n          }\n        });\n      },\n\n      /**\r\n       * Filter static version\r\n       *\r\n       * @param element\r\n       */\n      filterStatic: function filterStatic(element, event) {\n        var parentShortcode = element.parents('.mptt-shortcode-wrapper');\n        var eventID = '#all';\n        var id = _.isEmpty(parentShortcode.attr('id')) ? 'not-set' : parentShortcode.attr('id');\n\n        if (element.is(\"select\")) {\n          eventID = element.val();\n        } else {\n          eventID = element.attr('href').replace(\"#\", \"\");\n        }\n\n        if (event == false || event.originalEvent === undefined) {//console.log('skip');\n        } else {\n          window.location.hash = id + ':' + eventID;\n        }\n\n        parentShortcode.find('table').hide();\n        parentShortcode.find('table[id=\"#' + eventID + '\"]').fadeIn();\n        state.setEventsHeight();\n      },\n\n      /**\r\n       * Add class if exists events in <TD>\r\n       */\n      setClassTd: function setClassTd() {\n        $.each($('.mptt-event-container'), function () {\n          $(this).parents('td').addClass('event');\n        });\n      },\n\n      /**\r\n       * Init TimeTable\r\n       */\n      initTableData: function initTableData() {\n        state.setClassTd();\n        state.setRowSpanTd();\n        var table_class = '.' + MPTT.table_class;\n\n        if ($(table_class).data('hide_empty_row')) {\n          state.hideEmptyRows();\n        }\n      },\n\n      /**\r\n       *  init Filters\r\n       */\n      filterShortcodeEvents: function filterShortcodeEvents() {\n        var selector = $('.mptt-menu');\n\n        if (selector.length) {\n          selector.off('change').on('change', function (event) {\n            state.filterStatic($(this), event);\n            state.responsiveFilter($(this));\n          });\n          $('.mptt-navigation-tabs.mptt-menu a').off('click').on('click', function (event) {\n            var $currentTab = $(this);\n            $currentTab.parents('.mptt-navigation-tabs.mptt-menu').find('li').removeClass('active');\n            $currentTab.parents('li').addClass('active');\n            state.filterStatic($currentTab, event);\n            state.responsiveFilter($currentTab);\n          });\n        }\n      },\n\n      /**\r\n       * Show events in shortcode container by current event\r\n       * @param shortcode_wrapper\r\n       * @param event\r\n       */\n      showCurrentEvent: function showCurrentEvent(shortcode_wrapper, event) {\n        if (shortcode_wrapper.find('.mptt-menu').hasClass('mptt-navigation-tabs')) {\n          shortcode_wrapper.find('.mptt-navigation-tabs').find('a[href=\"#' + event + '\"]').click();\n        } else if (shortcode_wrapper.find('.mptt-menu').hasClass('mptt-navigation-select')) {\n          if (shortcode_wrapper.find('.mptt-navigation-select option[value=\"' + event + '\"]')) {\n            shortcode_wrapper.find('.mptt-navigation-select').val(event).change();\n          } else {\n            shortcode_wrapper.find('table[id=\"#all\"]').fadeIn();\n          }\n        } else {\n          shortcode_wrapper.find('table[id=\"#all\"]').fadeIn();\n        }\n      },\n\n      /**\r\n       * Filter by hash\r\n       */\n      getFilterByHash: function getFilterByHash() {\n        var is_single = 1;\n        var hash = window.location.hash;\n\n        if (!_.isUndefined(hash)) {\n          var HashArray = hash.split(':');\n          var id = HashArray[0];\n          var event = HashArray[1];\n          var shortcode_wrapper = $('.mptt-shortcode-wrapper');\n          event = _.isUndefined(event) ? 'all' : event;\n\n          if (shortcode_wrapper.length === is_single) {\n            state.showCurrentEvent(shortcode_wrapper, event);\n          } else {\n            $.each(shortcode_wrapper, function (index, object) {\n              var element = $(object);\n              var element_id = '#' + element.attr('id');\n\n              if (element_id === id) {\n                state.showCurrentEvent(element, event);\n              } else {\n                state.showCurrentEvent(element, 'all');\n              }\n            });\n          }\n        }\n\n        state.setEventsHeight();\n      },\n\n      /**\r\n       * Clear table after change colSpan\r\n       *\r\n       * @param columnIndex\r\n       * @param toColSpan\r\n       * @param $table\r\n       * @param row\r\n       */\n      removeCellsAfterChangeColSpan: function removeCellsAfterChangeColSpan(columnIndex, toColSpan, $table, row) {\n        for (columnIndex; columnIndex < toColSpan; columnIndex++) {\n          var columnId = $table.find('th[data-index=\"' + columnIndex + '\"]').data('column-id');\n          row.find('td:not(.event)[data-column-id=\"' + columnId + '\"]').remove();\n        }\n      },\n\n      /**\r\n       * Set rowSpan\r\n       * @param td\r\n       * @param rowSpan\r\n       * @param $table\r\n       * @param columnId\r\n       * @returns rowSpan\r\n       */\n      removeCellsAfterChangeRowSpan: function removeCellsAfterChangeRowSpan(td, rowSpan, $table, columnId) {\n        var index = td.parents('tr').attr('data-index'),\n            toRowSpan = rowSpan + parseInt(index) - 1,\n            colSpan = td.attr('colspan'),\n            columnIndex = $table.find('th[data-column-id=\"' + columnId + '\"]').data('index'),\n            toColSpan = parseInt(columnIndex) + parseInt(colSpan);\n\n        for (index; index < toRowSpan; index++) {\n          var row = $table.find('tr.mptt-shortcode-row-' + (parseInt(index) + 1));\n\n          if (row.length) {\n            if (row.find('td.event[data-column-id=\"' + columnId + '\"]').length) {\n              rowSpan -= toRowSpan - index;\n\n              if (rowSpan < 2) {\n                rowSpan = 1;\n                break;\n              }\n            }\n\n            if (colSpan > 1) {\n              state.removeCellsAfterChangeColSpan(columnIndex, toColSpan, $table, row);\n            }\n\n            row.find('td:not(.event)[data-column-id=\"' + columnId + '\"]').remove();\n          }\n        }\n\n        return rowSpan;\n      },\n\n      /**\r\n       * Set rowSpan td\r\n       */\n      setRowSpanTd: function setRowSpanTd() {\n        var table_class = '.' + MPTT.table_class;\n        $.each($(table_class), function () {\n          var $table = $(this);\n          $.each($table.find('td.event'), function () {\n            var td = $(this),\n                events = td.find('.mptt-event-container'),\n                columnId = td.attr('data-column-id'),\n                rowHeight = td.attr('data-row_height'),\n                rowSpan = state.getRowSpan(events, td);\n\n            if (!_.isUndefined(rowSpan) && rowSpan > 1) {\n              rowSpan = state.removeCellsAfterChangeRowSpan(td, rowSpan, $table, columnId);\n\n              if (!isNaN(rowHeight)) {\n                td.css('height', rowSpan * rowHeight);\n              }\n            }\n\n            td.attr('rowspan', rowSpan);\n          });\n        });\n      },\n\n      /**\r\n       * Remove empty rows\r\n       */\n      hideEmptyRows: function hideEmptyRows() {\n        var table_class = '.' + MPTT.table_class;\n        var trs = $(table_class + ' tbody tr'),\n            col_count = $(table_class).first().find('th').length;\n        $.each(trs, function (index, value) {\n          // if all columns in the row are empty\n          if ($(value).find('td.event').length === 0 && $(value).find('td').length === col_count) {\n            $(value).remove();\n          }\n        });\n      },\n\n      /**\r\n       * Widget settings\r\n       */\n      displaySettings: function displaySettings() {\n        var $viewSettings = $('.view_settings');\n\n        if ($viewSettings.length) {\n          $viewSettings.change(function () {\n            if ($(this).val() === \"all\") {\n              var id = $(this).attr('id');\n              $(this).parents('.mptt-container').find('.next-days').css(\"display\", \"block\");\n            } else {\n              $(this).parents('.mptt-container').find(\".next-days\").css(\"display\", \"none\");\n            }\n          });\n        }\n      },\n\n      /**\r\n       * Widget time settings\r\n       * @param selector\r\n       */\n      timeMode: function timeMode(selector) {\n        if (selector) {\n          var selector_id = \".\" + $(this).attr('id');\n          $('#' + selector).change(function () {\n            if ($(this).val() === \"server\") {\n              var id = $(this).attr('id');\n              $(this).parents('.mptt-container').find(selector_id).css(\"display\", \"block\");\n            } else {\n              $(this).parents('.mptt-container').find(selector_id).css(\"display\", \"none\");\n            }\n          });\n        }\n      },\n\n      /**\r\n       * init DatePicker for column\r\n       */\n      initDatePicker: function initDatePicker() {\n        var $date_picker = $(\"#datepicker\");\n\n        if ($date_picker.length) {\n          $date_picker.datepicker({\n            dateFormat: 'd/m/yy',\n            setDate: Date.parse($date_picker.val())\n          });\n        }\n      },\n\n      /**\r\n       *  init Column  radio box change\r\n       */\n      columnRadioBox: function columnRadioBox() {\n        var $date_picker = $('#datepicker');\n        var $column_option = $('input.option-input[name=\"column[column_option]\"]');\n        var $weekday = $('select.mp-weekday');\n\n        if ($column_option.length) {\n          $column_option.on('change', function () {\n            switch ($(this).val()) {\n              case 'simple':\n                $weekday.prop(\"disabled\", true);\n                $date_picker.prop(\"disabled\", true);\n                break;\n\n              case 'weekday':\n                $weekday.prop(\"disabled\", false);\n                $date_picker.val('').prop(\"disabled\", true);\n                break;\n\n              case 'date':\n                $weekday.prop(\"disabled\", true);\n                $date_picker.prop(\"disabled\", false);\n                break;\n            }\n          });\n        }\n      }\n    };\n  }\n\n  return {\n    getInstance: function getInstance() {\n      if (!state) {\n        state = createInstance();\n      }\n\n      return state;\n    }\n  };\n}(jQuery));\n\n//# sourceURL=webpack:///./media/js/events/event.js?");

/***/ })

/******/ });